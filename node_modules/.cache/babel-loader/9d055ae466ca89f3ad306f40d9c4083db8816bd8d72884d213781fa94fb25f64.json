{"ast":null,"code":"export const formConfig = {\n  formSelector: \".form\",\n  inputSelector: \".form__input\",\n  submitButtonSelector: \".form__submit\",\n  inactiveButtonClass: \"form__submit_inactive\",\n  inputErrorClass: \"form__input_type_error\",\n  errorClass: \"form__input-error_active\"\n};\nexport class FormValidator {\n  constructor(config, formElement) {\n    this._config = config;\n    this._formElement = formElement;\n  }\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this[\"_errorElement-\" + inputElement.id];\n    inputElement.classList.add(this._config.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._config.errorClass);\n  }\n  _hideInputError(inputElement) {\n    const errorElement = this[\"_errorElement-\" + inputElement.id];\n    inputElement.classList.remove(this._config.inputErrorClass);\n    errorElement.classList.remove(this._config.errorClass);\n    errorElement.textContent = \"\";\n  }\n  _checkInputValidity(inputElement) {\n    if (!inputElement.validity.valid) {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    } else {\n      this._hideInputError(inputElement);\n    }\n  }\n  _hasInvalidInput(inputList) {\n    return inputList.some(inputElement => {\n      return !inputElement.validity.valid;\n    });\n  }\n  _toggleButtonState(inputList, buttonElement) {\n    if (this._hasInvalidInput(inputList)) {\n      buttonElement.classList.add(this._config.inactiveButtonClass);\n      buttonElement.disabled = true;\n    } else {\n      buttonElement.classList.remove(this._config.inactiveButtonClass);\n      buttonElement.disabled = false;\n    }\n  }\n  _setEventListeners() {\n    const inputList = Array.from(this._formElement.querySelectorAll(this._config.inputSelector));\n    const buttonElement = this._formElement.querySelector(this._config.submitButtonSelector);\n    inputList.forEach(inputElement => {\n      this[\"_errorElement-\" + inputElement.id] = this._formElement.querySelector(`.${inputElement.id}-error`);\n      inputElement.addEventListener(\"input\", () => {\n        this._checkInputValidity(inputElement);\n        this._toggleButtonState(inputList, buttonElement);\n      });\n    });\n  }\n  enableValidation() {\n    this._formElement.addEventListener(\"submit\", evt => {\n      evt.preventDefault();\n    });\n    this._setEventListeners();\n  }\n}","map":{"version":3,"names":["formConfig","formSelector","inputSelector","submitButtonSelector","inactiveButtonClass","inputErrorClass","errorClass","FormValidator","constructor","config","formElement","_config","_formElement","_showInputError","inputElement","errorMessage","errorElement","id","classList","add","textContent","_hideInputError","remove","_checkInputValidity","validity","valid","validationMessage","_hasInvalidInput","inputList","some","_toggleButtonState","buttonElement","disabled","_setEventListeners","Array","from","querySelectorAll","querySelector","forEach","addEventListener","enableValidation","evt","preventDefault"],"sources":["/Users/umiter/Desktop/TripleTen/Sprint 15/web_project_around_auth/src/utils/FormValidator.js"],"sourcesContent":["export const formConfig = {\n  formSelector: \".form\",\n  inputSelector: \".form__input\",\n  submitButtonSelector: \".form__submit\",\n  inactiveButtonClass: \"form__submit_inactive\",\n  inputErrorClass: \"form__input_type_error\",\n  errorClass: \"form__input-error_active\",\n};\n\nexport class FormValidator {\n  constructor(config, formElement) {\n    this._config = config;\n    this._formElement = formElement;\n  }\n\n  _showInputError(inputElement, errorMessage) {\n    const errorElement = this[\"_errorElement-\" + inputElement.id];\n    inputElement.classList.add(this._config.inputErrorClass);\n    errorElement.textContent = errorMessage;\n    errorElement.classList.add(this._config.errorClass);\n  }\n\n  _hideInputError(inputElement) {\n    const errorElement = this[\"_errorElement-\" + inputElement.id];\n    inputElement.classList.remove(this._config.inputErrorClass);\n    errorElement.classList.remove(this._config.errorClass);\n    errorElement.textContent = \"\";\n  }\n\n  _checkInputValidity(inputElement) {\n    if (!inputElement.validity.valid) {\n      this._showInputError(inputElement, inputElement.validationMessage);\n    } else {\n      this._hideInputError(inputElement);\n    }\n  }\n\n  _hasInvalidInput(inputList) {\n    return inputList.some((inputElement) => {\n      return !inputElement.validity.valid;\n    });\n  }\n\n  _toggleButtonState(inputList, buttonElement) {\n    if (this._hasInvalidInput(inputList)) {\n      buttonElement.classList.add(this._config.inactiveButtonClass);\n      buttonElement.disabled = true;\n    } else {\n      buttonElement.classList.remove(this._config.inactiveButtonClass);\n      buttonElement.disabled = false;\n    }\n  }\n\n  _setEventListeners() {\n    const inputList = Array.from(\n      this._formElement.querySelectorAll(this._config.inputSelector)\n    );\n    const buttonElement = this._formElement.querySelector(\n      this._config.submitButtonSelector\n    );\n\n    inputList.forEach((inputElement) => {\n      this[\"_errorElement-\" + inputElement.id] =\n        this._formElement.querySelector(`.${inputElement.id}-error`);\n      inputElement.addEventListener(\"input\", () => {\n        this._checkInputValidity(inputElement);\n        this._toggleButtonState(inputList, buttonElement);\n      });\n    });\n  }\n\n  enableValidation() {\n    this._formElement.addEventListener(\"submit\", (evt) => {\n      evt.preventDefault();\n    });\n\n    this._setEventListeners();\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}