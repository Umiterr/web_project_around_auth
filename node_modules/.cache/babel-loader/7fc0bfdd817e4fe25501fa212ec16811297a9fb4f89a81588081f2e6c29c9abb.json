{"ast":null,"code":"export const BASE_URL = \"https://register.nomoreparties.co\";\nexport const register = async (contraseña, email) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password: contraseña,\n        email: email\n      })\n    });\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"Error: No se ha proporcionado uno o más campos\");\n      } else if (response.status === 401) {\n        throw new Error(\"Error: No se ha encontrado al usuario con el correo electrónico especificado\");\n      } else {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n    const responseBody = await response.json();\n    console.log(responseBody);\n    return console.log(responseBody);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return {\n      error: true,\n      message: error.message\n    };\n  }\n};\nexport const login = async (contraseña, email) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        password: contraseña,\n        email: email\n      })\n    });\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"Error: Uno de los campos se rellenó de forma incorrecta\");\n      } else {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n    const responseBody = await response.json();\n    console.log(responseBody);\n    return console.log(responseBody);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return {\n      error: true,\n      message: error.message\n    };\n  }\n};","map":{"version":3,"names":["BASE_URL","register","contraseña","email","response","fetch","method","headers","body","JSON","stringify","password","ok","status","Error","statusText","responseBody","json","console","log","error","message","login"],"sources":["/Users/umiter/Desktop/TripleTen/Sprint 15/web_project_around_auth/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = \"https://register.nomoreparties.co\";\n\nexport const register = async (contraseña, email) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signup`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        password: contraseña,\n        email: email,\n      }),\n    });\n\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\"Error: No se ha proporcionado uno o más campos\");\n      } else if (response.status === 401) {\n        throw new Error(\n          \"Error: No se ha encontrado al usuario con el correo electrónico especificado\"\n        );\n      } else {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n\n    const responseBody = await response.json();\n    console.log(responseBody);\n\n    return console.log(responseBody);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return { error: true, message: error.message };\n  }\n};\n\nexport const login = async (contraseña, email) => {\n  try {\n    const response = await fetch(`${BASE_URL}/signin`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        password: contraseña,\n        email: email,\n      }),\n    });\n\n    if (!response.ok) {\n      if (response.status === 400) {\n        throw new Error(\n          \"Error: Uno de los campos se rellenó de forma incorrecta\"\n        );\n      } else {\n        throw new Error(`Error: ${response.status} - ${response.statusText}`);\n      }\n    }\n\n    const responseBody = await response.json();\n    console.log(responseBody);\n\n    return console.log(responseBody);\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n    return { error: true, message: error.message };\n  }\n};\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,mCAAmC;AAE3D,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,UAAU,EAAEC,KAAK,KAAK;EACnD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;MACjDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAET,UAAU;QACpBC,KAAK,EAAEA;MACT,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,IAAIR,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;MACnE,CAAC,MAAM,IAAIV,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QAClC,MAAM,IAAIC,KAAK,CACb,8EACF,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,UAASV,QAAQ,CAACS,MAAO,MAAKT,QAAQ,CAACW,UAAW,EAAC,CAAC;MACvE;IACF;IAEA,MAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;IAEzB,OAAOE,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACC,OAAO,CAAC;IACtC,OAAO;MAAED,KAAK,EAAE,IAAI;MAAEC,OAAO,EAAED,KAAK,CAACC;IAAQ,CAAC;EAChD;AACF,CAAC;AAED,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOpB,UAAU,EAAEC,KAAK,KAAK;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEL,QAAS,SAAQ,EAAE;MACjDM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBC,QAAQ,EAAET,UAAU;QACpBC,KAAK,EAAEA;MACT,CAAC;IACH,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACQ,EAAE,EAAE;MAChB,IAAIR,QAAQ,CAACS,MAAM,KAAK,GAAG,EAAE;QAC3B,MAAM,IAAIC,KAAK,CACb,yDACF,CAAC;MACH,CAAC,MAAM;QACL,MAAM,IAAIA,KAAK,CAAE,UAASV,QAAQ,CAACS,MAAO,MAAKT,QAAQ,CAACW,UAAW,EAAC,CAAC;MACvE;IACF;IAEA,MAAMC,YAAY,GAAG,MAAMZ,QAAQ,CAACa,IAAI,CAAC,CAAC;IAC1CC,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;IAEzB,OAAOE,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;EAClC,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAACC,OAAO,CAAC;IACtC,OAAO;MAAED,KAAK,EAAE,IAAI;MAAEC,OAAO,EAAED,KAAK,CAACC;IAAQ,CAAC;EAChD;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}